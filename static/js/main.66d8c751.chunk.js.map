{"version":3,"sources":["App.js","style/style.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","react_default","a","createElement","Component","withStyles","appContainer","textAlign","appHeader","backgroundColor","minHeight","fontDize","color","position","width","zIndex","searchContainerPaper","padding","display","alignItems","flexBasis","menuPaper","input","marginLeft","flex","order","iconButton","divider","height","margin","searchContainer","justifyContent","@media (max-width:780px)","flexDirection","searchHistoryContainer","top","searchHistoryItem","cursor","&:hover","error","fontSize","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8LAKMA,qBAEJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,GAFIP,qHAUjB,OACEQ,EAAAC,EAAAC,cAAA,2BAbYC,cAmBHC,uBCxBO,CACpBC,aAAc,CACZC,UAAW,UAEbC,UAAW,CACTC,gBAAiB,UACjBC,UAAW,GACXC,SAAU,qBACVC,MAAO,QACPC,SAAU,QACVC,MAAO,OACPC,OAAQ,GAEVC,qBAAsB,CACpBC,QAAS,UACTC,QAAS,OACTC,WAAY,SACZC,UAAW,OAEbC,UAAW,CACTJ,QAAS,UACTC,QAAS,OACTE,UAAW,OAEbE,MAAO,CACLC,WAAY,EACZC,KAAM,EACNC,MAAO,GAETC,WAAY,CACVT,QAAS,GACTQ,MAAO,GAETE,QAAS,CACPb,MAAO,EACPc,OAAQ,GACRC,OAAQ,GAEVC,gBAAiB,CACfZ,QAAS,OACTD,QAAS,GACTR,gBAAiB,OACjBU,WAAY,SACZY,eAAgB,SAChBC,2BAA4B,CAC1BC,cAAe,WAGnBC,uBAAwB,CACtBrB,SAAU,WACVsB,IAAK,KAEPC,kBAAmB,CACjBC,OAAQ,UACRC,UAAU,CACR7B,gBAAiB,cAGrB8B,MAAO,CACL1B,SAAU,WACVsB,IAAK,IACLvB,MAAO,MACP4B,SAAU,KDtCCnC,CAAmBd,GEZdkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,CAAKxC,UAAW,yBAA2ByC,SAASC,eAAe,SD2H7E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.66d8c751.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { styles } from './style/style';\nimport './style/loading.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  componentDidMount() {\n  }\n\n  render() {\n    return (\n      <div> TEST\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","export const styles = {\n  appContainer: {\n    textAlign: 'center'\n  },\n  appHeader: {\n    backgroundColor: '#282c34',\n    minHeight: 45,\n    fontDize: 'calc(10px + 2vmin)',\n    color: 'white',\n    position: 'fixed',\n    width: '100%',\n    zIndex: 3\n  },\n  searchContainerPaper: {\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center',\n    flexBasis: '30%',\n  },\n  menuPaper: {\n    padding: '2px 4px',\n    display: 'flex',\n    flexBasis: '10%',\n  },\n  input: {\n    marginLeft: 8,\n    flex: 1,\n    order: 1\n  },\n  iconButton: {\n    padding: 10,\n    order: 1\n  },\n  divider: {\n    width: 1,\n    height: 28,\n    margin: 4,\n  },\n  searchContainer: {\n    display: 'flex',\n    padding: 10,\n    backgroundColor: 'gray',\n    alignItems: 'center',\n    justifyContent: 'center',\n    '@media (max-width:780px)': {\n      flexDirection: 'column'\n    }\n  },\n  searchHistoryContainer: {\n    position: 'relative',\n    top: 100\n  },\n  searchHistoryItem: {\n    cursor: 'pointer',\n    '&:hover':{\n      backgroundColor: 'lightgray'\n  }\n  },\n  error: {\n    position: 'relative',\n    top: 125,\n    color: 'red',\n    fontSize: 40\n  }\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App appHeader={'Flicker Image Search'}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}